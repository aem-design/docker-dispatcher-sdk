#!/bin/bash
#
# Script to run dispatcher validator and docker dispatcher image to test the configuration
#
# Usage: validate.sh config-folder
#

usage() {
    cat <<EOF >& 1
Usage: $0 config-folder

Example:
  # Use configuration folder "src/dispatcher", run validator and then test the configuration
  # generated by validator with httpd -t (from docker image), dump processed dispatcher.any config.
  # Finally immutability check is performed for selected config files.
  $0 src/dispatcher
EOF
    exit 1
}

[ $# -eq 1 ] || usage

configDir=$1
scriptDir="$(cd -P "$(dirname "$0")" && pwd -P)"

if [ -f "${configDir}"/opt-in/USE_SOURCES_DIRECTLY ];
then
    echo "opt-in USE_SOURCES_DIRECTLY marker file detected"

    if [ -z "${WARNING_MODE}" ]; then
        export WARNING_MODE=strict
    fi

    echo "Phase 1: Dispatcher validator"
    "${scriptDir}"/validator full -relaxed "${configDir}"
    if [ $? -eq 0 ]; then
        echo "Phase 1 finished successfully"
    else
        echo "Phase 1 failed"
        exit 1
    fi

    echo "Phase 2: httpd -t validation in docker image"
    HTTPD_DUMP_VHOSTS=true "${scriptDir}"/docker_run.sh "${configDir}" localhost:12345 test
    if [ $? -eq 0 ]; then
        echo "Phase 2 finished successfully"
    else
        echo "Phase 2 failed"
        exit 2
    fi

    echo "Phase 3: Immutability check"
    "${scriptDir}"/docker_immutability_check.sh "${configDir}"
    if [ $? -eq 0 ]; then
        echo "Phase 3 finished successfully"
    else
        echo "Phase 3 failed"
        if [[ "$ENABLE_VALIDATOR_CHECK_FLAG" != "true" ]]; then
            exit 3
        fi
    fi

    if [[ "$ENABLE_VALIDATOR_CHECK_FLAG" == "true" ]]; then 
        sdkFolder="$(dirname $scriptDir)"
        echo "Phase 4: Endpoints check"
        "${scriptDir}"/validator check -configFolder "${configDir}" -sdkFolder "$sdkFolder"
        if [ $? -eq 0 ]; then
            echo "Phase 4 finished successfully"
        else
            echo "Phase 4 failed"
            exit 4
        fi
    fi
else
    echo "WARNING: legacy mode was detected. Please plan to move to flexible mode and benefit from all the new features. More details here https://experienceleague.adobe.com/docs/experience-manager-cloud-service/content/implementing/content-delivery/validation-debug.html?lang=en#migrating"
    timestamp=$(date +%s)
    tempDir="/tmp/dispatcher_validation_${timestamp}"

    rm -rf "${tempDir}"
    mkdir -p "${tempDir}"

    echo "Phase 1: Dispatcher validator"
    "${scriptDir}"/validator full -d "${tempDir}" "${configDir}"
    if [ $? -eq 0 ]; then
        echo "Phase 1 finished successfully"
    else
        echo "Phase 1 failed"
        exit 1
    fi

    echo "Phase 2: httpd -t validation in docker image"
    HTTPD_DUMP_VHOSTS=true "${scriptDir}"/docker_run.sh "${tempDir}" localhost:12345 test
    echo "Phase 2 finished"
    if [ $? -eq 0 ]; then
        echo "Phase 2 finished successfully"
    else
        echo "Phase 2 failed"
        exit 2
    fi

    echo "WARNING: legacy mode was detected. Please plan to move to flexible mode and benefit from all the new features. More details here https://experienceleague.adobe.com/docs/experience-manager-cloud-service/content/implementing/content-delivery/validation-debug.html?lang=en#migrating"

    echo "Phase 3: Immutability check"
    "${scriptDir}"/docker_immutability_check.sh "${configDir}"
    if [ $? -eq 0 ]; then
        echo "Phase 3 finished successfully"
    else
        echo "Phase 3 failed"
        exit 3
    fi

    rm -rf "${tempDir}"
fi
