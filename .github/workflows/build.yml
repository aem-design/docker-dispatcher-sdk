name: build

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: docker.io
      ORGANISATION_NAME: aemdesign
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}


    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
      - name: set envirnment variables
        id: config
        run: |
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_config.sh)
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_version.sh)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export to Docker
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: |
            ${{ env.IMAGE }}:${{ env.GIT_BRANCH }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE }}:${{ env.GIT_BRANCH }}


      - name: test docker image
        run: |
          cd test && bash ./run_tests.sh "ghcr.io/$GITHUB_REPOSITORY_OWNER/$IMAGE:$GIT_BRANCH"

      - name: Run docker image analysis
        continue-on-error: true
        uses: MaxymVlasov/dive-action@v1.4.0
        with:
          image:  ${{ steps.docker_build.outputs.imageid }}
          config-file: ${{ github.workspace }}/.dive-ci.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags
        id: tags
        run: |
          # Check if this is a tag push
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract tag name (e.g., refs/tags/2.0.187 -> 2.0.187)
            VERSION_TAG="${{ github.ref_name }}"
            TAGS="${IMAGE}:${VERSION_TAG}"
            TAGS="${TAGS},ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE}:${VERSION_TAG}"
            echo "Building from git tag: ${VERSION_TAG}"
          else
            # Branch push - use branch name
            TAGS="${IMAGE}:${GIT_BRANCH}"
            TAGS="${TAGS},ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE}:${GIT_BRANCH}"
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              TAGS="${TAGS},${IMAGE}:latest"
              TAGS="${TAGS},ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE}:latest"
            fi
            echo "Building from branch: ${GIT_BRANCH}"
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        continue-on-error: true
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: aemdesign/dispatcher-sdk
      - uses: meeDamian/github-release@1.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ env.GIT_RELEASE_NOTES }}

  test-macos:
    name: Test on macOS (Apple Silicon)
    needs: build
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: macos-14
    
    steps:

      
      - name: Install and start Colima (Docker runtime)
        run: |
          brew install docker colima
          colima start --arch aarch64 --vm-type=vz --vz-rosetta --mount-type=virtiofs
          docker --version
          docker info
      
      - name: Set environment variables
        id: config
        run: |
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_config.sh)
          source <(curl -sL https://github.com/aem-design/aemdesign-docker/releases/latest/download/github_get_version.sh)
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Show Docker info
        run: |
          docker --version
          docker info
          uname -m
      
      - name: Pull arm64 image
        run: |
          echo "Pulling arm64 image: ghcr.io/${{ github.repository_owner }}/$IMAGE:$GIT_BRANCH"
          docker pull --platform linux/arm64 ghcr.io/${{ github.repository_owner }}/$IMAGE:$GIT_BRANCH
          docker tag ghcr.io/${{ github.repository_owner }}/$IMAGE:$GIT_BRANCH $IMAGE:$GIT_BRANCH
      
      - name: Verify platform architecture
        run: |
          echo "Inspecting image architecture..."
          docker inspect ghcr.io/${{ github.repository_owner }}/$IMAGE:$GIT_BRANCH --format='{{.Architecture}}'
          docker images | grep dispatcher-sdk
      
      - name: Test docker image on macOS
        run: |
          echo "Running tests on macOS with arm64 image..."
          cd test && bash ./run_tests.sh "ghcr.io/${{ github.repository_owner }}/$IMAGE:$GIT_BRANCH"
      
      - name: Show test logs on failure
        if: failure()
        run: |
          echo "=== Docker Logs ==="
          docker ps -a
          docker compose -f test/docker-compose.yml logs || true


